stages:
  - changeset
  - build
  - test
  - dast
  - backup
  - deploy
  - rollback
  - commitupdate
  
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

variables:
  GIT_STRATEGY: clone
  DS_EXCLUDED_ANALYZERS: dependency_scanning
  UCD_COMPONENT_BASE_PATH: "target"
  UCD_DEPLOY_JSON_PATH: "urbancode"
  Component_Name: "Sample-Gitlab-Integraion-UCD-REST_API"

 backup-scribeDB:
	stage: backup
	tags:
	  - shell
	before_script:
		- if [ -d "$DEPLOYMENT_DIR" ]; then echo "Deployment directory exists"; else echo "Deployment directory does not exist"; exit 1; fi
	script:
		- if [ ! -d "$BACKUP_DIR" ]; then mkdir -p "$BACKUP_DIR"; echo "Backup directory created"; else echo "Backup directory exists"; fi
		- mkdir -p /tmp/deployment_backup
		- cp -r "$DEPLOYMENT_DIR" /tmp/deployment_backup/
		- tar -czvf "$BACKUP_DIR/deployment_backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C /tmp deployment_backup
		- rm -rf /tmp/deployment_backup
		- find "$BACKUP_DIR" -type f -name "*.tar.gz" | sort | head -n -5 | xargs rm -f
  
Changeset:
    stage: Pre
    script:
        - mkdir -p Target
        - echo $CI_COMMIT_TAG
        # Modified files
        - |
            if [[ $CI_COMMIT_TAG == PROD_* ]];
            then 
             CI_PREVIOUS_COMMIT=$CI_PREVIOUS_COMMIT_PROD
            fi      
            if [[ $CI_COMMIT_TAG == DEV_* ]];
            then 
             echo "Updating CI_PREVIOUS_COMMIT value for DEV"
             CI_PREVIOUS_COMMIT=$CI_PREVIOUS_COMMIT_DEV
            fi        
        - echo $CI_PREVIOUS_COMMIT
        - echo $CI_PREVIOUS_COMMIT_PROD
        - echo $CI_PREVIOUS_COMMIT_DEV
        - mfiles=$(git diff $CI_PREVIOUS_COMMIT $CI_COMMIT_SHA --name-only --diff-filter=d)
        - echo $mfiles
        - |
            if [ ! -z "$mfiles" ];
            then
            echo "$mfiles" | while IFS= read -r line ; do echo $line; cp -rf --parents "$line" Target; done
               #cp -rv --parents "$mfiles" Target;
            else
                echo "No modified files";
            fi
        # Deleted Files
        - dfiles=$(git diff --diff-filter=D --name-only --summary $CI_PREVIOUS_COMMIT HEAD | grep delete || true) 
        - if [ ! -z "$dfiles" ];
            then
                echo $dfiles >> Target/dfiles.txt;
            else
                echo "No deleted files";
            fi
        # If there are no modified files or deleted files
        - if [[ -z $dfiles && -z $mfiles ]];
            then
                echo "NO changes found";
                exit 1;
            else
                echo "Changes delivered to target folder";
            fi
 
CommitUpdate:
    stage: Post
    script:
        - CI_PREVIOUS_COMMIT=$(git rev-parse HEAD)
        - |
            if [[ $CI_COMMIT_TAG == PROD_* ]];
            then 
             curl -k --request PUT --header "PRIVATE-TOKEN: $TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CI_PREVIOUS_COMMIT_PROD" --form "value=$CI_PREVIOUS_COMMIT"
            fi    
            if [[ $CI_COMMIT_TAG == DEV_* ]];
            then
             curl -k --request PUT --header "PRIVATE-TOKEN: $TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CI_PREVIOUS_COMMIT_DEV" --form "value=$CI_PREVIOUS_COMMIT"
            fi   
        #- 'curl -k --request PUT --header "PRIVATE-TOKEN: $TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CI_PREVIOUS_COMMIT" --form "value=$CI_PREVIOUS_COMMIT"'
        #- 'curl -k --capath /home/ec2-user --cacert wild.in-2048.cer --request PUT --header "PRIVATE-TOKEN: $TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/CI_PREVIOUS_COMMIT" --form "value=$CI_PREVIOUS_COMMIT"'
build:
  stage: build
  tags:
    - shell-97
  before_script:
    - | 
      export JAVA_HOME="/home/gitlab-runner/oracle-java/jdk-17.0.11"
      export PATH=$JAVA_HOME\bin:$PATH
    - java -version
  script:
    - mvn clean package

    - $udclient_path -username $USER -password $PassWord --weburl $UCD_WEB_URL createVersion --component $Component_Name --name $CI_PIPELINE_IID --base $CI_PROJECT_DIR/target

    - $udclient_path -username $USER -password $PassWord --weburl $UCD_WEB_URL addVersionFiles -component $Component_Name -version $CI_PIPELINE_IID --base $CI_PROJECT_DIR/target
    
  artifacts:
    paths:
      - ./target/*
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
    - if: $CI_COMMIT_BRANCH =~ /QA/
    - if: $CI_COMMIT_BRANCH =~ /Prod/

# SAST and secret detection jobs are included from templates
semgrep-sast:
  stage: test
  tags:
    - docker-97
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
    - if: $CI_COMMIT_BRANCH =~ /UAT/
    - if: $CI_COMMIT_BRANCH =~ /QA/
    - if: $CI_COMMIT_BRANCH =~ /Prod/
  dependencies:
    - "build"

secret_detection:
  stage: test
  tags:
    - docker-97
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
    - if: $CI_COMMIT_BRANCH =~ /UAT/
    - if: $CI_COMMIT_BRANCH =~ /QA/
    - if: $CI_COMMIT_BRANCH =~ /Prod/
  dependencies:
    - "sast"

gemnasium-dependency_scanning:
  stage: test
  tags:
    - docker-97
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
    - if: $CI_COMMIT_BRANCH =~ /UAT/
    - if: $CI_COMMIT_BRANCH =~ /QA/
    - if: $CI_COMMIT_BRANCH =~ /Prod/
  dependencies:
    - "secret_detection"

dast:
  stage: dast
  tags:
    - docker-97
  dast_configuration:
    site_profile: "dast"
    scanner_profile: "dast for vsm demo"

backup_dev_environment:
  stage: backup
  tags:
    - shell-97
  script:
    - echo "Backing up the project on dev environment..."
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/

backup_QA_environment:
  stage: backup
  tags:
    - shell-97
  script:
    - echo "Backing up the project on QA environment..."
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH =~ /QA/


backup_Production_environment:
  stage: backup
  tags:
    - shell-97
  script:
    - echo "Backing up the project on Production environment..."
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH =~ /Prod/

deploy_dev_environment:
  stage: deploy
  tags:
    - shell-97
  before_script:
    - echo Hello Console
  script:
    - echo Hello Console
  environment:
    name: dev
  dependencies:
    - build
  # needs:
  #   - backup_dev_environment
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
  artifacts:
    paths:
      - ./target/*

deploy_QA_environment:
  stage: deploy
  tags:
    - shell-97
  script:
        -  echo "deplpoying"
  needs:
    - backup_QA_environment
  environment:
    name: QA
  rules:
    - if: $CI_COMMIT_BRANCH =~ /QA/


deploy_Production_environment:
  stage: deploy
  tags:
    - shell-97
  script:
        -  echo "deplpoying"
  needs:
    - backup_Production_environment
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH =~ /Prod/

rollback_dev_environment:
  stage: rollback
  tags:
    - shell-97
  script:
    - echo "Rolling back the project on dev environment..."
  needs:
    - deploy_dev_environment
  rules:
    - if: $CI_COMMIT_BRANCH =~ /dev/
  when: manual

rollback_QA_environment:
  stage: rollback
  tags:
    - shell-97
  script:
    - echo "Rolling back the project on QA environment..."
  needs:
    - deploy_QA_environment
  rules:
    - if: $CI_COMMIT_BRANCH =~ /QA/
  when: manual


rollback_Production_environment:
  stage: rollback
  tags:
    - shell-97
  script:
    - echo "Rolling back the project on Production environment..."
  needs:
    - deploy_Production_environment
  rules:
    - if: $CI_COMMIT_BRANCH =~ /Prod/ 
  when: manual  





sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
sudo yum install -y docker-ce docker-ce-cli containerd.io
sudo systemctl start docker
sudo systemctl enable docker
